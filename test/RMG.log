Global RMG Settings:
   test_data.directory  = /home/dinius.ab/Code/RMG-Py/rmgpy/test_data (Default, relative to RMG-Py source code)
   database.directory   = /home/dinius.ab/Code/RMG-database/input (Default, relative to RMG-Py source code)
RMG execution initiated at Thu Jun 27 12:42:52 2019

#########################################################
# RMG-Py - Reaction Mechanism Generator in Python       #
# Version: 2.4.0                                        #
# Authors: RMG Developers (rmg_dev@mit.edu)             #
# P.I.s:   William H. Green (whgreen@mit.edu)           #
#          Richard H. West (r.west@neu.edu)             #
# Website: http://reactionmechanismgenerator.github.io/ #
#########################################################

The current git HEAD for RMG-Py is:
	4fab5868d04dfe606f41dc39eb1985988cbf5431
	Tue Jun 25 14:50:21 2019 -0400

The current git HEAD for RMG-database is:
	a3c960c9116608a4a168bb2b890b296439d91b98
	Mon Jun 17 16:32:25 2019 -0400

Reading input file "/home/dinius.ab/Code/n-heptane/test/test.py"...
# Data sources
database(
    thermoLibraries = ['primaryThermoLibrary'],
    reactionLibraries = [],
    seedMechanisms = [],
    kineticsDepositories = ['training'], 
    kineticsFamilies = 'default',
    kineticsEstimator = 'rate rules',
)

# Constraints on generated species
generatedSpeciesConstraints(
    maximumCarbonAtoms = 7,
)

# List of species
species(
    label='n-heptane',
    structure=SMILES("CCCCCCC"),
)

species(
    label='Ar',
    reactive=False,
    structure=SMILES("[Ar]"),
)


simpleReactor(
    temperature=(1600,'K'),
    pressure=(400,'Pa'),
    initialMoleFractions={
        "n-heptane": 0.02,
        "Ar": 0.98,
    },
    terminationConversion={
        'n-heptane': 0.99,
    },
    terminationTime=(1e6,'s'),
)

simpleReactor(
    temperature=(2000,'K'),
    pressure=(400,'Pa'),
    initialMoleFractions={
        "n-heptane": 0.02,
        "Ar": 0.98,
    },
    terminationConversion={
        'n-heptane': 0.99,
    },
    terminationTime=(1e6,'s'),
)

#absolute and relative tolerance for ODE solver, atol usually 1e-15 - 1e-25, rtol 1e-4 - 1e-8
simulator(
    atol=1e-16,
    rtol=1e-8,
)

#tolerancemovetocore is how high edge flux ratio of species must reach before entering core model
#toleranceInterruptSimulation how high edge flux ratio to interrupt sim, set equal to tolerancemove to core
model(
    toleranceMoveToCore=0.1,
    toleranceInterruptSimulation=0.1
)

# generates k(T, P) interpolation model
#wo methods available: 'modified strong collision' is faster and less accurate than 'reservoir state'
pressureDependence(
    method='modified strong collision',
    maximumGrainSize=(0.5,'kcal/mol'),
    minimumNumberOfGrains=250,
    temperatures=(300,3000,'K',8),
    pressures=(0.001,100,'bar',5),
    interpolation=('Chebyshev', 6, 4),
)


1600 K
2000 K
Loading thermodynamics library from primaryThermoLibrary.py in /home/dinius.ab/Code/RMG-database/input/thermo/libraries...
Loading thermodynamics group database from /home/dinius.ab/Code/RMG-database/input/thermo/groups...
Loading transport library from PrimaryTransportLibrary.py in /home/dinius.ab/Code/RMG-database/input/transport/libraries...
Loading transport library from GRI-Mech.py in /home/dinius.ab/Code/RMG-database/input/transport/libraries...
Loading transport library from NOx2018.py in /home/dinius.ab/Code/RMG-database/input/transport/libraries...
Loading transport library from OneDMinN2.py in /home/dinius.ab/Code/RMG-database/input/transport/libraries...
Loading transport group database from /home/dinius.ab/Code/RMG-database/input/transport/groups...
Loading frequencies group database from /home/dinius.ab/Code/RMG-database/input/statmech/groups...
Loading Platts additivity group database from /home/dinius.ab/Code/RMG-database/input/solvation/groups...
Adding rate rules from training set in kinetics families...
Warning: Cphigh is above the theoretical CpInf value for ThermoData object
ThermoData(Tdata=([300,400,500,600,800,1000,1500],'K'), Cpdata=([36.6869,38.2195,39.253,40.4473,45.0357,50.6323,54.2027],'J/(mol*K)'), H298=(310.047,'kJ/mol'), S298=(162.808,'J/(mol*K)'), Cp0=(29.1007,'J/(mol*K)'), CpInf=(37.4151,'J/(mol*K)'), comment="""Thermo group additivity estimation: group(O2s-CsCs) + group(CsJ2_singlet-CsH)""").
The thermo for this species is probably wrong! Setting CpInf = Cphigh for Entropy calculationat T = 2000.0 K...
Warning: Cphigh is above the theoretical CpInf value for ThermoData object
ThermoData(Tdata=([300,400,500,600,800,1000,1500],'K'), Cpdata=([36.6869,38.2195,39.253,40.4473,45.0357,50.6323,54.2027],'J/(mol*K)'), H298=(310.047,'kJ/mol'), S298=(162.808,'J/(mol*K)'), Cp0=(29.1007,'J/(mol*K)'), CpInf=(37.4151,'J/(mol*K)'), comment="""Thermo group additivity estimation: group(O2s-CsCs) + group(CsJ2_singlet-CsH)""").
The thermo for this species is probably wrong! Setting CpInf = Cphigh for Entropy calculationat T = 1666.66666667 K...
Warning: Cphigh is above the theoretical CpInf value for ThermoData object
ThermoData(Tdata=([300,400,500,600,800,1000,1500],'K'), Cpdata=([36.6869,38.2195,39.253,40.4473,45.0357,50.6323,54.2027],'J/(mol*K)'), H298=(310.047,'kJ/mol'), S298=(162.808,'J/(mol*K)'), Cp0=(29.1007,'J/(mol*K)'), CpInf=(37.4151,'J/(mol*K)'), comment="""Thermo group additivity estimation: group(O2s-CsCs) + group(CsJ2_singlet-CsH)""").
The thermo for this species is probably wrong! Setting CpInf = Cphigh for Entropy calculationat T = 2000.0 K...
Warning: Cphigh is above the theoretical CpInf value for ThermoData object
ThermoData(Tdata=([300,400,500,600,800,1000,1500],'K'), Cpdata=([36.6869,38.2195,39.253,40.4473,45.0357,50.6323,54.2027],'J/(mol*K)'), H298=(310.047,'kJ/mol'), S298=(162.808,'J/(mol*K)'), Cp0=(29.1007,'J/(mol*K)'), CpInf=(37.4151,'J/(mol*K)'), comment="""Thermo group additivity estimation: group(O2s-CsCs) + group(CsJ2_singlet-CsH)""").
The thermo for this species is probably wrong! Setting CpInf = Cphigh for Entropy calculationat T = 1666.66666667 K...
Filling in rate rules in kinetics families by averaging...
